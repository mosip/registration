name: Maven Package upon a push 

on:

  pull_request:
    types: [closed]
  push:
    branches:
      - master
      - 1.*
      - develop
      - MOSIP-15130
  
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Setup branch and env
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV

    - name: Setup branch and GPG public key
      run: |
        # Strip git ref prefix from version
        echo ${{ env.BRANCH_NAME }}
        echo ${{ env.GPG_TTY }}
        sudo apt-get --yes install gnupg2
        gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg
        gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}

    - name: Setup the settings file for ossrh server
      run: echo "<settings> <servers>  <server>  <id>ossrh</id>    <username>${{secrets.ossrh_user}}</username> <password>${{secrets.ossrh_secret}}</password> </server> </servers> <profiles> <profile>     <id>ossrh</id> <activation> <activeByDefault>true</activeByDefault> </activation>  <properties> <gpg.executable>gpg2</gpg.executable> <gpg.passphrase>${{secrets.gpg_secret}}</gpg.passphrase> </properties> </profile> <profile> <id>allow-snapshots</id>       <activation><activeByDefault>true</activeByDefault></activation> <repositories> <repository>        <id>snapshots-repo</id> <url>https://oss.sonatype.org/content/repositories/snapshots</url> <releases><enabled>false</enabled></releases> <snapshots><enabled>true</enabled></snapshots> </repository>  <repository>         <id>releases-repo</id>  <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>         <releases><enabled>true</enabled></releases>         <snapshots><enabled>false</enabled></snapshots> </repository> </repositories>  </profile> <profile> <id>sonar</id> <properties>  <sonar.sources>.</sonar.sources> <sonar.host.url>https://sonarcloud.io</sonar.host.url>  </properties> <activation> <activeByDefault>false</activeByDefault> </activation> </profile> </profiles> </settings>" > $GITHUB_WORKSPACE/settings.xml

    - name: Build with Maven
      run: |
        cd registration-processor
        mvn -B package -s $GITHUB_WORKSPACE/settings.xml --file pom.xml

    - name: Ready the springboot artifacts
      run: find -name '*.jar' -executable -type f  -exec zip release.zip {} +


    - name: Upload the springboot jars 
      uses: actions/upload-artifact@v1
      with:
        name: release
        path: ./release.zip

    - name: Analyze with SonarCloud
      run: |
        cd registration-processor
        mvn -B -Dgpg.skip -Dmaven.javadoc.skip=true verify sonar:sonar -Dsonar.projectKey=mosip_${{ github.event.repository.name }} -Dsonar.organization=${{ secrets.ORG_KEY }} -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: Build registration-processor-stage-group-1 image
      run: |
          # The Mosip Stage Executor is not packaged as part of release.zip
          cd "./$SERVICE_LOCATION"
          docker build . --file Dockerfile --tag $SERVICE_NAME
      env:
        SERVICE_NAME: registration-processor-stage-group-1
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-1
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-stage-group-1
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-1

    - name: Build registration-processor-stage-group-2 image
      run: |
          # The Mosip Stage Executor is not packaged as part of release.zip
          cd "./$SERVICE_LOCATION"
          docker build . --file Dockerfile --tag $SERVICE_NAME
      env:
        SERVICE_NAME: registration-processor-stage-group-2
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-2
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-stage-group-2
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-2

    - name: Build registration-processor-stage-group-3 image
      run: |
          # The Mosip Stage Executor is not packaged as part of release.zip
          cd "./$SERVICE_LOCATION"
          docker build . --file Dockerfile --tag $SERVICE_NAME
      env:
        SERVICE_NAME: registration-processor-stage-group-3
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-3
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-stage-group-3
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-3

    - name: Build registration-processor-stage-group-4 image
      run: |
          # The Mosip Stage Executor is not packaged as part of release.zip
          cd "./$SERVICE_LOCATION"
          docker build . --file Dockerfile --tag $SERVICE_NAME
      env:
        SERVICE_NAME: registration-processor-stage-group-4
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-4
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-stage-group-4
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-4

    - name: Build registration-processor-stage-group-5 image
      run: |
          # The Mosip Stage Executor is not packaged as part of release.zip
          cd "./$SERVICE_LOCATION"
          docker build . --file Dockerfile --tag $SERVICE_NAME
      env:
        SERVICE_NAME: registration-processor-stage-group-5
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-5
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-stage-group-5
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-5

    - name: Build registration-processor-stage-group-6 image
      run: |
          # The Mosip Stage Executor is not packaged as part of release.zip
          cd "./$SERVICE_LOCATION"
          docker build . --file Dockerfile --tag $SERVICE_NAME
      env:
        SERVICE_NAME: registration-processor-stage-group-6
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-6
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
        IMAGE_ID=$NAMESPACE/$SERVICE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        VERSION=$BRANCH_NAME
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-stage-group-6
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-6


    - name: Build registration-processor-stage-group-7 image
      run: |
          # The Mosip Stage Executor is not packaged as part of release.zip
          cd "./$SERVICE_LOCATION"
          docker build . --file Dockerfile --tag $SERVICE_NAME
      env:
        SERVICE_NAME: registration-processor-stage-group-7
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-7
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
    - name: Push image
      run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-stage-group-7
        SERVICE_LOCATION: registration-processor/stage-groups/registration-processor-stage-group-7



    - name: Build camel bridge image
      run: |
        # The camel bridge is not packaged as part of release.zip
        cd "./registration-processor/registration-processor-common-camel-bridge"
        docker build . --file Dockerfile --tag registration-processor-common-camel-bridge
    - name: Log into registry
      run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

    - name: Push image
      run: |
        IMAGE_ID=$NAMESPACE/$SERVICE_NAME

        # Change all uppercase to lowercase
        IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
        VERSION=$BRANCH_NAME
        echo IMAGE_ID=$IMAGE_ID
        echo VERSION=$VERSION
        docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
        docker push $IMAGE_ID:$VERSION
      env:
        NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
        SERVICE_NAME: registration-processor-common-camel-bridge
        SERVICE_LOCATION: registration-processor/registration-processor-common-camel-bridge

  publish_to_nexus:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 11
        server-id: ossrh # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    - uses: actions/checkout@v2


    - name: Setup branch and env
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo "GPG_TTY=$(tty)" >> $GITHUB_ENV

    - name: Setup branch and GPG public key
      run: |
        # Strip git ref prefix from version
        echo ${{ env.BRANCH_NAME }}
        echo ${{ env.GPG_TTY }}
        sudo apt-get --yes install gnupg2
        gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg
        gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg
    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}

    - name: Install xmllint
      run: |
        sudo apt-get update
        sudo apt-get install libxml2-utils

    - name: Setup the settings file for ossrh server
      run: echo "<settings> <servers>  <server>  <id>ossrh</id>    <username>${{secrets.RELEASE_USER}}</username> <password>${{secrets.RELEASE_TOKEN}}</password> </server> </servers> <profiles> <profile>     <id>ossrh</id> <activation> <activeByDefault>true</activeByDefault> </activation>  <properties> <gpg.executable>gpg2</gpg.executable> <gpg.passphrase>${{secrets.gpg_secret}}</gpg.passphrase> </properties> </profile> <profile> <id>allow-snapshots</id>       <activation><activeByDefault>true</activeByDefault></activation> <repositories> <repository>        <id>snapshots-repo</id> <url>https://oss.sonatype.org/content/repositories/snapshots</url> <releases><enabled>false</enabled></releases> <snapshots><enabled>true</enabled></snapshots> </repository>  <repository>         <id>releases-repo</id>  <url>https://oss.sonatype.org/service/local/staging/deploy/maven2</url>         <releases><enabled>true</enabled></releases>         <snapshots><enabled>false</enabled></snapshots> </repository> </repositories>  </profile> <profile> <id>sonar</id> <properties>  <sonar.sources>.</sonar.sources> <sonar.host.url>https://sonarcloud.io</sonar.host.url>  </properties> <activation> <activeByDefault>false</activeByDefault> </activation> </profile> </profiles> </settings>" > $GITHUB_WORKSPACE/settings.xml

    - name: Publish the maven package
      run: |
        mvn deploy -DaltDeploymentRepository=ossrh::default::${{ secrets.RELEASE_URL }} -s $GITHUB_WORKSPACE/settings.xml -f pom.xml
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        GPG_TTY: $(tty)

  docker-registration-processor-registration-transaction-service:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: mosipdev
      SERVICE_NAME: registration-processor-registration-transaction-service
      SERVICE_LOCATION: registration-processor/post-processor/registration-processor-registration-transaction-service

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract the ${{ env.SERVICE_NAME }}
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"
      
      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
 
  docker-registration-processor-abis:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: mosipdev
      SERVICE_NAME: registration-processor-abis
      SERVICE_LOCATION: registration-processor/core-processor/registration-processor-abis

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract the ${{ env.SERVICE_NAME }}
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"
      
      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
  docker-registration-processor-reprocessor:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: mosipdev
      SERVICE_NAME: registration-processor-reprocessor
      SERVICE_LOCATION: registration-processor/workflow-engine/registration-processor-reprocessor

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract the ${{ env.SERVICE_NAME }}
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"
      
      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  docker-registration-processor-dmz-packet-server:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: mosipdev
      SERVICE_NAME: registration-processor-dmz-packet-server
      SERVICE_LOCATION: registration-processor/init/registration-processor-dmz-packet-server

    steps:
      - uses: actions/checkout@v2

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: Get version info
        id: getVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/version.xml
          xpath: version
      
      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getVersion.outputs.info}}"
          VERSION=${{steps.getVersion.outputs.info}}
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  docker-registration-processor-registration-status-service:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: mosipdev
      SERVICE_NAME: registration-processor-registration-status-service
      SERVICE_LOCATION: registration-processor/init/registration-processor-registration-status-service

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml 
          xpath: /*[local-name()="project"]/*[local-name()="version"] 
      
      - name: Unzip and extract the ${{ env.SERVICE_NAME }}
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"
      
      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin
        
      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  docker-registration-processor-notification-service:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: mosipdev
      SERVICE_NAME: registration-processor-notification-service
      SERVICE_LOCATION: registration-processor/registration-processor-notification-service

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name: Unzip and extract the ${{ env.SERVICE_NAME }}
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"

      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  docker-registration-processor-workflow-manager-service:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: mosipdev
      SERVICE_NAME: registration-processor-workflow-manager-service
      SERVICE_LOCATION: registration-processor/workflow-engine/registration-processor-workflow-manager-service

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          # Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV

      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name: Unzip and extract the ${{ env.SERVICE_NAME }}
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"

      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION