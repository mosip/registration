spring.cloud.config.uri=localhost
spring.cloud.config.label=master
spring.profiles.active=mz
spring.application.name=registration-processor,application
spring.cloud.config.name=registration-processor
registration.processor.identityjson=RegistrationProcessorIdentity.json
registration.processor.demographic.identity=identity
packet.info.storage.service=registration-processor-packet-info-storage-service
config.server.file.storage.uri=${spring.cloud.config.uri}/${packet.info.storage.service}/${spring.profiles.active}/${spring.cloud.config.label}/
management.endpoints.web.exposure.include=refresh
registration.processor.zone=secure
vertx.cluster.configuration=${spring.cloud.config.uri}/*/${spring.profiles.active}/${spring.cloud.config.label}/hazelcast_${registration.processor.zone}.xml
#management.security.enabled=false
mosip.regproc.packet.classifier.server.port=8092
#disabling health check so that client doesnt try to load properties from sprint config server every
# 5 minutes (should not be done in production)
health.config.enabled=false
mosip.regproc.packet.classifier.eventbus.port=5724
server.servlet.path=/registrationprocessor/v1/packetclassifier
#Kafka event bus configruations
mosip.regproc.eventbus.kafka.commit.type=${mosip.regproc.packet.classifier.eventbus.kafka.commit.type}
mosip.regproc.eventbus.kafka.max.poll.records=${mosip.regproc.packet.classifier.eventbus.kafka.max.poll.records}
mosip.regproc.eventbus.kafka.poll.frequency=${mosip.regproc.packet.classifier.eventbus.kafka.poll.frequency}
mosip.regproc.eventbus.kafka.group.id=${mosip.regproc.packet.classifier.eventbus.kafka.group.id}