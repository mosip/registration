<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="test_start_time" elementType="Argument">
            <stringProp name="Argument.name">test_start_time</stringProp>
            <stringProp name="Argument.value">2024-10-10 08:45:00.000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="test_end_time" elementType="Argument">
            <stringProp name="Argument.name">test_end_time</stringProp>
            <stringProp name="Argument.value">2024-10-10 09:45:00.000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="delay" elementType="Argument">
            <stringProp name="Argument.name">delay</stringProp>
            <stringProp name="Argument.value">1000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbHost" elementType="Argument">
            <stringProp name="Argument.name">dbHost</stringProp>
            <stringProp name="Argument.value">172.31.2.65</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPort" elementType="Argument">
            <stringProp name="Argument.name">dbPort</stringProp>
            <stringProp name="Argument.value">5432</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="regproc_dbName" elementType="Argument">
            <stringProp name="Argument.name">regproc_dbName</stringProp>
            <stringProp name="Argument.value">mosip_regprc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credential_dbName" elementType="Argument">
            <stringProp name="Argument.name">credential_dbName</stringProp>
            <stringProp name="Argument.value">mosip_credential</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUser" elementType="Argument">
            <stringProp name="Argument.name">dbUser</stringProp>
            <stringProp name="Argument.value">postgres</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPassword" elementType="Argument">
            <stringProp name="Argument.name">dbPassword</stringProp>
            <stringProp name="Argument.value">797mKZO1Bo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runTimeFilePath" elementType="Argument">
            <stringProp name="Argument.name">runTimeFilePath</stringProp>
            <stringProp name="Argument.value">./runtime-files</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">3024</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Regproc DB Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">regprc_connection</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${dbHost}:${dbPort}/${regproc_dbName}</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">797mKZO1Bo</stringProp>
        <stringProp name="poolMax">50</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">6000</stringProp>
        <stringProp name="username">${dbUser}</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Credential DB Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">credential_connection</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${dbHost}:${dbPort}/${credential_dbName}</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">797mKZO1Bo</stringProp>
        <stringProp name="poolMax">50</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">6000</stringProp>
        <stringProp name="username">${dbUser}</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load RID From File" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Users/akhilesh.moogi/OneDrive - Technoforte Software Private Limited/Documents/Jmeter Scripts/RegProc Async/reg_id.txt</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.thread</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">reg_id</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S01 Secure Zone To Upload Packet" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Secure_Zone_Notification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secureZoneTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Notification received to securezone	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secureZoneTimeSuccess</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">SECUREZONE_NOTIFICATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	RPR-SEN-SUCCESS-001</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Success" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${secureZoneTimeSuccess}&quot; == &quot;SUCCESS&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Upload_Packet" enabled="true">
            <stringProp name="dataSource">regprc_connection</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${secureZoneTime}&apos;)) AS response_time_securezone_upload, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UPLOAD_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">success</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="BoundaryExtractor.refname">responseTimeSecurezoneToUploadSuccess</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">RPR-PKU-SUCCESS-001	</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="BoundaryExtractor.refname">responseTimeSecurezoneToUpload</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">UPLOAD_PACKET	</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">	Packet is Uploaded to Packet Store</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">prev.setIgnore()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def response_time = vars.get(&quot;responseTimeSecurezoneToUpload&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S01&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Success" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${responseTimeSecurezoneToUploadSuccess}&quot; == &quot;SUCCESS&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S01 Secure Zone To Upload Packet" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">${responeTime_S01}</stringProp>
              <stringProp name="LATENCY">0</stringProp>
              <stringProp name="CONNECT">${responeTime_S01}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Failed" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${responseTimeSecurezoneToUploadSuccess}&quot;  == &quot;NOT_FOUND&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S01 Failed_packets" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">false</boolProp>
              <stringProp name="RESPONSE_CODE">500</stringProp>
              <stringProp name="RESPONSE_MESSAGE">Internal error</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">0</stringProp>
              <stringProp name="LATENCY">0</stringProp>
              <stringProp name="CONNECT">0</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Failed" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${secureZoneTimeSuccess}&quot;  == &quot;NOT_FOUND&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S01 Failed_packets" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">false</boolProp>
            <stringProp name="RESPONSE_CODE">500</stringProp>
            <stringProp name="RESPONSE_MESSAGE">Internal error</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">0</stringProp>
            <stringProp name="LATENCY">0</stringProp>
            <stringProp name="CONNECT">0</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S02 Upload Packet To Validate Packet" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Upload_Packet" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UPLOAD_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">UploadPacketTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Packet is Uploaded to Packet Store	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">UploadPacketTimeSuccess</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">UPLOAD_PACKET	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	RPR-PKU-SUCCESS-001</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Success" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${UploadPacketTimeSuccess}&quot; == &quot;SUCCESS&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Validate_Packet" enabled="true">
            <stringProp name="dataSource">regprc_connection</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${UploadPacketTime}&apos;)) AS response_time_upload_validate, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;VALIDATE_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1149187101">SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.scope">all</stringProp>
              <stringProp name="Scope.variable">success</stringProp>
            </ResponseAssertion>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="BoundaryExtractor.refname">responseTimeUploadToValidate</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">VALIDATE_PACKET	</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">	Packet Validation is Successful</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="BoundaryExtractor.refname">responseTimeUploadToValidateSuccess</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">RPR-PKV-SUCCESS-001	</stringProp>
              <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">prev.setIgnore()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def response_time = vars.get(&quot;responseTimeUploadToValidate&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S02&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Success" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${responseTimeUploadToValidateSuccess}&quot; == &quot;SUCCESS&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S02 Upload Packet To Validate Packet" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">${responeTime_S02}</stringProp>
              <stringProp name="RESPONSE_TIME">${responeTime_S02}</stringProp>
              <stringProp name="LATENCY">0</stringProp>
              <stringProp name="CONNECT">${responeTime_S02}</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Failed" enabled="true">
            <stringProp name="IfController.condition">${__jexl3(&quot;${responseTimeUploadToValidateSuccess}&quot;  == &quot;NOT_FOUND&quot;)}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
            <boolProp name="IfController.useExpression">true</boolProp>
          </IfController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S02 Failed_packets" enabled="true">
              <boolProp name="WAITING">false</boolProp>
              <boolProp name="SUCCESFULL">false</boolProp>
              <stringProp name="RESPONSE_CODE">500</stringProp>
              <stringProp name="RESPONSE_MESSAGE">Internal error</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <stringProp name="RESPONSE_TIME">0</stringProp>
              <stringProp name="LATENCY">0</stringProp>
              <stringProp name="CONNECT">0</stringProp>
              <stringProp name="URL"></stringProp>
              <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Failed" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${UploadPacketTimeSuccess}&quot;  == &quot;NOT_FOUND&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S02 Failed_packets" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">false</boolProp>
            <stringProp name="RESPONSE_CODE">500</stringProp>
            <stringProp name="RESPONSE_MESSAGE">Internal error</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">0</stringProp>
            <stringProp name="LATENCY">0</stringProp>
            <stringProp name="CONNECT">0</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S03 Validate Packet To Packet Classification" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Validate_Packet" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;VALIDATE_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">ValidatePacketTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Packet Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Packet_Classification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${ValidatePacketTime}&apos;)) AS response_time_validate_classification, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PACKET_CLASSIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeValidateToClassification</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">PACKET_CLASSIFICATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet Classification is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeValidateToClassification&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S03&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S03 Validate Packet To Packet Classification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S03}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S03}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S04 Packet Classification To CMD Validation" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Packet_Classification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PACKET_CLASSIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">PacketClassificationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Packet Classification is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CMD_Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${PacketClassificationTime}&apos;)) AS response_time_CMD_validation, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;CMD_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeClassificationToCMD</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">CMD_VALIDATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	CMD Validation is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeClassificationToCMD&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S04&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S04 Packet Classification To CMD Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S04}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S04}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S05 CMD Validation To Operator Validation" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CMD_Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;CMD_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">CMDvalidationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">CMD Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Operator_Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${CMDvalidationTime}&apos;)) AS response_time_CMD_operator, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;OPERATOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeCMDtoOperatorValidation</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">OPERATOR_VALIDATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	OPERATOR Validation is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeCMDtoOperatorValidation&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S05&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S05 CMD Validation To Operator Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S05}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S05}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S06 Operator Validation To Supervisor Validation" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Operator_Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;OPERATOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">OperatorValidationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">OPERATOR Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Supervisor_Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${OperatorValidationTime}&apos;)) AS response_time_operator_supervisor, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SUPERVISOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeOperatorToSupervisor</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">SUPERVISOR_VALIDATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	SUPERVISOR Validation is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeOperatorToSupervisor&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S06&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S06 Operator Validation To Supervisor Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S06}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S06}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S07 Supervisor Validation To Quality Classifiier" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Supervisor_Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SUPERVISOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">SupervisorValidationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">SUPERVISOR Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Quality_Classifier" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${SupervisorValidationTime}&apos;)) AS response_time_supervisor_quality, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;QUALITY_CLASSIFIER&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeSupervisorToQuality</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">QUALITY_CLASSIFIER	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Biometric Quality Check is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeSupervisorToQuality&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S07&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S07 Supervisor Validation To Quality Classifiier" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S07}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S07}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S08 Quality Classifiier To Demographic Verification" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Quality_Classifier" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;QUALITY_CLASSIFIER&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">QualityClassifierTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Biometric Quality Check is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Demographic_Verification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${QualityClassifierTime}&apos;)) AS response_time_quality_demo, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;DEMOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeQualityToDemo</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">DEMOGRAPHIC_VERIFICATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Demo Dedupe is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeQualityToDemo&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S08&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S08 Quality Classifiier To Demographic Verification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S08}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S08}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S09 Demographic Verification To Biographic Verification" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Demographic_Verification " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;DEMOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">DemoTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Demo Dedupe is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biographic_Verification " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${DemoTime}&apos;)) AS response_time_demo_bio, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeDemoToBio</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">BIOGRAPHIC_VERIFICATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Biometric Deduplication is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeDemoToBio&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S09&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S09 Demographic Verification To Biographic Verification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S09}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S09}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S10 Biographic Verification To UIN Generation" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biographic_Verification " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">BioTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Biometric Deduplication is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UIN_Generation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${BioTime}&apos;)) AS response_time_bio_UIN, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UIN_GENERATOR&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeBioToUIN</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">UIN_GENERATOR	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	UIN Generated Successfully</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeBioToUIN&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S10&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S10 Biographic Verification To UIN Generation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S10}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S10}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S11 UIN Generation To Biometric Extraction" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UIN_Generation " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UIN_GENERATOR&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">UinTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">UIN Generated Successfully	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biometric_Extraction" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${UinTime}&apos;)) AS response_time_UIN_BioExtract, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOMETRIC_EXTRACTION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeUinToBioExtract</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">BIOMETRIC_EXTRACTION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	biometric extaction was successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeUinToBioExtract&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S11&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S11 UIN Generation To Biometric Extraction" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S11}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S11}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S12 Biometric Extraction To Finalization" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biometric_Extraction " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOMETRIC_EXTRACTION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">BioExtractTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">biometric extaction was successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Finalization" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${BioExtractTime}&apos;)) AS response_time_BioExtract_final, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;FINALIZATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeBioExtractToFinal</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">FINALIZATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	idrepo draft was published  successfuly</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeBioExtractToFinal&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S12&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S12 Biometric Extraction To Finalization" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S12}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S12}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S13 Finalization To Print Service" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Finalization" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;FINALIZATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">FinalizationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">idrepo draft was published  successfuly	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Print_Service" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${FinalizationTime}&apos;)) AS response_time_final_print, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PRINT_SERVICE&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeFinalToPrint</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">PRINT_SERVICE	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Print request submitted</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeFinalToPrint&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S13&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S13 Finalization To Print Service" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S13}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S13}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S14 Print Service To Internal Workflow Action" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Print_Service" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PRINT_SERVICE&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">PrintTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Print request submitted	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Internal_Workflow_Action" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${PrintTime}&apos;)) AS response_time_print_IWA, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;INTERNAL_WORKFLOW_ACTION&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimePrintToIWA</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">INTERNAL_WORKFLOW_ACTION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet processing completed </stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimePrintToIWA&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S14&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S14 Print Service To Internal Workflow Action" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S14}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S14}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S15 Complete Reg Proc Packet Processing " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Secure_Zone_Notification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secureZoneTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Notification received to securezone	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Internal_Workflow_Action" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${secureZoneTime}&apos;)) AS response_time_secureZone_IWA, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;INTERNAL_WORKFLOW_ACTION&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeSecureToIWA</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">INTERNAL_WORKFLOW_ACTION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet processing completed </stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeSecureToIWA&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S15&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S15 Complete Reg Proc Packet Processing " enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S15}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S15}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S16 End to End Packet and Credential Processing " enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Start_Time_Secure_Zone_Success" enabled="false">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_by, cr_dtimes, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos; and status_code = &apos;SUCCESS&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secure_zone_start_time</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">MOSIP_SYSTEM	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">def response = prev.getResponseDataAsString()

if (response.contains(&quot;SUCCESS&quot;)) {
 
    vars.put(&quot;Credential_table&quot;, &quot;true&quot;)
} else {
    vars.put(&quot;Credential_table&quot;, &quot;false&quot;)
}</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Credential_table" enabled="false">
          <stringProp name="dataSource">credential_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT id, issuancedate, cr_by, cr_dtimes, status_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${secure_zone_start_time}&apos;)) AS response_time
	FROM credential.credential_transaction where id = &apos;${reg_id}&apos; and status_code = &apos;STORED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responsetime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">STORED	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary"></stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Response time to files" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">${__StringToFile(./store_response_time.jtl,${responsetime}\n,true,)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responsetime&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;resp&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="End-to-End Packet processing " enabled="false">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">Average Response time: ${resp}</stringProp>
          <stringProp name="RESPONSE_TIME">${resp}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${resp}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Start_Time_Secure_Zone_All" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, sub_status_code, status_comment, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secure_zone_start_time</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">MOSIP_SYSTEM	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">success</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">securezone	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Success" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${success}&quot; == &quot;SUCCESS&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Credential_table" enabled="true">
            <stringProp name="dataSource">credential_connection</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, issuancedate, cr_by, cr_dtimes, status_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${secure_zone_start_time}&apos;)) AS response_time
	FROM credential.credential_transaction where id = &apos;${reg_id}-PDF&apos; and status_code = &apos;STORED&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="BoundaryExtractor.refname">responsetime</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">STORED	</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Response time to files" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">${__StringToFile(./store_response_time.jtl,${responsetime}\n,true,)}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">prev.setIgnore()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def response_time = vars.get(&quot;responsetime&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;resp&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S16 End-to-End Packet processing of Passed_packets" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Average Response time: ${resp}</stringProp>
            <stringProp name="RESPONSE_TIME">${resp}</stringProp>
            <stringProp name="LATENCY">0</stringProp>
            <stringProp name="CONNECT">${resp}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Failed" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${success}&quot; == &quot;NOT_FOUND&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S16 Failed_packets" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">false</boolProp>
            <stringProp name="RESPONSE_CODE">500</stringProp>
            <stringProp name="RESPONSE_MESSAGE">Internal error</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">0</stringProp>
            <stringProp name="LATENCY">0</stringProp>
            <stringProp name="CONNECT">0</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S17 Overall Status Of  The Packets" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="First Hour Total Packets Processed" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
	FROM regprc.registration where upd_dtimes between &apos;${test_start_time}&apos; and &apos;${test_end_time}&apos; and status_code = &apos;PROCESSED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;

// Retrieve the start time from JMeter variables
def startTime = vars.get(&quot;test_start_time&quot;);

// Define the date format
def dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);

// Parse the start time to a Date object
def date = dateFormat.parse(startTime);

// Create a Calendar instance and set the time
def calendar = Calendar.getInstance();
calendar.setTime(date);

// Add hours based on the iteration number
calendar.add(Calendar.HOUR, 1);

// Format the new time
def newTime = dateFormat.format(calendar.getTime());

// Store the new time in a JMeter variable
vars.put(&quot;newTime&quot;, newTime);


</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Every Hour Total Packets Processed" enabled="false">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
	FROM regprc.registration where upd_dtimes between &apos;${test_start_time}&apos; and &apos;${newTime}&apos; and status_code = &apos;PROCESSED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;

// Retrieve the start time from JMeter variables
def startTime = vars.get(&quot;test_start_time&quot;);

// Define the date format
def dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);

// Parse the start time to a Date object
def date = dateFormat.parse(startTime);

// Create a Calendar instance and set the time
def calendar = Calendar.getInstance();
calendar.setTime(date);

// Add 1 hour to the current time
calendar.add(Calendar.HOUR, 1);

// Format the new time
def newTime = dateFormat.format(calendar.getTime());

// Store the new time in a JMeter variable
vars.put(&quot;newTime&quot;, newTime);

// Update the test_start_time for the next iteration
vars.put(&quot;test_start_time&quot;, newTime);
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of packets failed in Reg Proc Every Hour" enabled="false">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
	FROM regprc.registration where upd_dtimes between &apos;${test_start_time}&apos; and &apos;${newTime}&apos; and status_code = &apos;FAILED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;

// Retrieve the start time from JMeter variables
def startTime = vars.get(&quot;test_start_time&quot;);

// Define the date format
def dateFormat = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;);

// Parse the start time to a Date object
def date = dateFormat.parse(startTime);

// Create a Calendar instance and set the time
def calendar = Calendar.getInstance();
calendar.setTime(date);

// Retrieve the iteration number from JMeter variables
def iteration = Integer.parseInt(vars.get(&quot;noOfHours&quot;));

// Add hours based on the iteration number
calendar.add(Calendar.HOUR, iteration);

// Format the new time
def newTime = dateFormat.format(calendar.getTime());

// Store the new time in a JMeter variable
vars.put(&quot;newTime&quot;, newTime);

// Update the test_start_time for the next iteration
calendar.add(Calendar.HOUR, 1);
def updatedStartTime = dateFormat.format(calendar.getTime());
vars.put(&quot;test_start_time&quot;, updatedStartTime);
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of packets passed in Credential process" enabled="false">
          <stringProp name="dataSource">credential_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct count(*) FROM credential.credential_transaction where cr_dtimes &gt;= &apos;${test_start_time}&apos; and status_code = &apos;STORED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of packets failed in Credential process" enabled="false">
          <stringProp name="dataSource">credential_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct count(*) FROM credential.credential_transaction where cr_dtimes &gt;= &apos;${test_start_time}&apos; and status_code = &apos;FAILED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
