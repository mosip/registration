<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="rampUp" elementType="Argument">
            <stringProp name="Argument.name">rampUp</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testDuration" elementType="Argument">
            <stringProp name="Argument.name">testDuration</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testStart" elementType="Argument">
            <stringProp name="Argument.name">testStart</stringProp>
            <stringProp name="Argument.value">2024-10-10 08:45:00.000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testEnd" elementType="Argument">
            <stringProp name="Argument.name">testEnd</stringProp>
            <stringProp name="Argument.value">2024-10-10 09:45:00.000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbHost" elementType="Argument">
            <stringProp name="Argument.name">dbHost</stringProp>
            <stringProp name="Argument.value">172.31.2.65</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPort" elementType="Argument">
            <stringProp name="Argument.name">dbPort</stringProp>
            <stringProp name="Argument.value">5432</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="regprocDbName" elementType="Argument">
            <stringProp name="Argument.name">regprocDbName</stringProp>
            <stringProp name="Argument.value">mosip_regprc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credentialDbName" elementType="Argument">
            <stringProp name="Argument.name">credentialDbName</stringProp>
            <stringProp name="Argument.value">mosip_credential</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUser" elementType="Argument">
            <stringProp name="Argument.name">dbUser</stringProp>
            <stringProp name="Argument.value">postgres</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPassword" elementType="Argument">
            <stringProp name="Argument.name">dbPassword</stringProp>
            <stringProp name="Argument.value">797mKZO1Bo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runTimeFilePath" elementType="Argument">
            <stringProp name="Argument.name">runTimeFilePath</stringProp>
            <stringProp name="Argument.value">./runtime-files</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="protocol" elementType="Argument">
            <stringProp name="Argument.name">protocol</stringProp>
            <stringProp name="Argument.value">https</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="packetUtilityPortNo" elementType="Argument">
            <stringProp name="Argument.name">packetUtilityPortNo</stringProp>
            <stringProp name="Argument.value">8080</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="packetUtilityServerIP" elementType="Argument">
            <stringProp name="Argument.name">packetUtilityServerIP</stringProp>
            <stringProp name="Argument.value">localhost</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverIPInternal" elementType="Argument">
            <stringProp name="Argument.name">serverIPInternal</stringProp>
            <stringProp name="Argument.value">api-internal.cellbox1.mosip.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPortNo" elementType="Argument">
            <stringProp name="Argument.name">serverPortNo</stringProp>
            <stringProp name="Argument.value">443</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="process" elementType="Argument">
            <stringProp name="Argument.name">process</stringProp>
            <stringProp name="Argument.value">NEW</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="mountPath" elementType="Argument">
            <stringProp name="Argument.name">mountPath</stringProp>
            <stringProp name="Argument.value">/centralized/mountvolume</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverIP" elementType="Argument">
            <stringProp name="Argument.name">serverIP</stringProp>
            <stringProp name="Argument.value">cellbox1.mosip.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runTimeFilePath" elementType="Argument">
            <stringProp name="Argument.name">runTimeFilePath</stringProp>
            <stringProp name="Argument.value">./runtime-files</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="packetCreationCount" elementType="Argument">
            <stringProp name="Argument.name">packetCreationCount</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientId" elementType="Argument">
            <stringProp name="Argument.name">clientId</stringProp>
            <stringProp name="Argument.value">mosip-regproc-client</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secretKey" elementType="Argument">
            <stringProp name="Argument.name">secretKey</stringProp>
            <stringProp name="Argument.value">abc123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appId" elementType="Argument">
            <stringProp name="Argument.name">appId</stringProp>
            <stringProp name="Argument.value">regproc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="clientIdResident" elementType="Argument">
            <stringProp name="Argument.name">clientIdResident</stringProp>
            <stringProp name="Argument.value">mosip-resident-client</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secretKeyResident" elementType="Argument">
            <stringProp name="Argument.name">secretKeyResident</stringProp>
            <stringProp name="Argument.value">abc123</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="appIdResident" elementType="Argument">
            <stringProp name="Argument.name">appIdResident</stringProp>
            <stringProp name="Argument.value">resident</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Regproc DB Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">regprc_connection</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${dbHost}:${dbPort}/${regproc_dbName}</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">797mKZO1Bo</stringProp>
        <stringProp name="poolMax">50</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">6000</stringProp>
        <stringProp name="username">${dbUser}</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Credential DB Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">credential_connection</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${dbHost}:${dbPort}/${credential_dbName}</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">797mKZO1Bo</stringProp>
        <stringProp name="poolMax">50</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">6000</stringProp>
        <stringProp name="username">${dbUser}</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load RID From File" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">${runTimeFilePath}/reg_id.txt</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.thread</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">reg_id</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Context Details From File" enabled="true">
        <stringProp name="filename">./support-files/context_details_cellbox1.txt</stringProp>
        <stringProp name="fileEncoding">UTF-8</stringProp>
        <stringProp name="variableNames">userID,machineID,centerID,password</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Document Path From File" enabled="true">
        <stringProp name="filename">./support-files/document_path.txt</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">docPath</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Regproc Auth Token From File" enabled="true">
        <stringProp name="filename">${runTimeFilePath}/authorization_token_regproc.txt</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">authTokenRegproc</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Resident Auth Token From File" enabled="true">
        <stringProp name="filename">${runTimeFilePath}/authorization_token_resident.txt</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="variableNames">authTokenResident</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Auth Token Generation (Setup)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication Endpoint - Regproc" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;${clientId}&quot;,&#xd;
    &quot;secretKey&quot;: &quot;${secretKey}&quot;,&#xd;
    &quot;appId&quot;: &quot;${appId}&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverIPInternal}</stringProp>
          <stringProp name="HTTPSampler.port">${serverPortNo}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1843418944">&quot;message&quot;:&quot;Clientid and Token combination had been validated successfully&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Auth Token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">authToken</stringProp>
            <stringProp name="RegexExtractor.regex">set-cookie: Authorization=([\w.-]+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">authToken_not_found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Auth Token To File" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">${__StringToFile(${runTimeFilePath}/authorization_token_regproc.txt,${authToken}\n,false,)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Authentication Endpoint - Resident" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;id&quot;: &quot;string&quot;,&#xd;
  &quot;metadata&quot;: {},&#xd;
  &quot;request&quot;: {&#xd;
    &quot;clientId&quot;: &quot;${clientIdResident}&quot;,&#xd;
    &quot;secretKey&quot;: &quot;${secretKeyResident}&quot;,&#xd;
    &quot;appId&quot;: &quot;${appIdResident}&quot;&#xd;
  },&#xd;
  &quot;requesttime&quot;: &quot;${__time(YYYY-MM-dd&apos;T&apos;HH:mm:ss.SSS,)}Z&quot;,&#xd;
  &quot;version&quot;: &quot;1.0&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverIPInternal}</stringProp>
          <stringProp name="HTTPSampler.port">${serverPortNo}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v1/authmanager/authenticate/clientidsecretkey</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1843418944">&quot;message&quot;:&quot;Clientid and Token combination had been validated successfully&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Auth Token" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">true</stringProp>
            <stringProp name="RegexExtractor.refname">authToken</stringProp>
            <stringProp name="RegexExtractor.regex">set-cookie: Authorization=([\w.-]+);</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">authToken_not_found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Auth Token To File" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">${__StringToFile(${runTimeFilePath}/authorization_token_resident.txt,${authToken}\n,false,)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Packet Generation (Setup)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">60</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Context Endpoint" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;admin_zone_clientId&quot;: &quot;mosip-admin-client&quot;,&#xd;
  &quot;signPublicKey&quot;: &quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnkuJmoLUkpO5nGlLs8nZdpdzMHsBv03DQTqBZzxNgmE6H1FGIupdQwAflmE68btbAzJmmwyvOBCbjtyntyP6Zaf1Z2dzV8olFlCPaBXDCgckJzIXxxQnGYzgRfjmCvywnvLAGochqQmimxGejtS+5thU0FX//0p1WU4Zi7pzptOLb4jrXCPoBMZ5sbCGycgMyml5Q5dNtRIvMUvw6zGXutU+9fYiVFQ3d0SdJMXk15ygXyydvRLaYZ7gUdoIu7nbFV1eONJbtmsi+OVZrdc2+UzPqTHVRr1ovYUTOkm7Kz39QmlxeRo8Aos3keCIgjZTl/zH+nFJwQLm+STiLhEkiwIDAQAB&quot;,&#xd;
  &quot;mosip_regproc_client_secret&quot;: &quot;51GSCoEjmXIBfNuB&quot;,&#xd;
  &quot;FetchDeviceSpec_lang_URI&quot;: &quot;/v1/masterdata/devicespecifications/{langcode}&quot;,&#xd;
  &quot;mosip.test.persona.locationsdatapath&quot;: &quot;/profile_resource/location_data&quot;,&#xd;
  &quot;partnerUrlSuffix&quot;: &quot;oYf63Lax0DY2QkYMRHnrmDqhmO3RMWQagwm0ftgLlkuin1KOND/666/576732&quot;,&#xd;
  &quot;mosip.test.persona.datapath&quot;: &quot;/profile_resource/&quot;,&#xd;
  &quot;partner_user_password&quot;: &quot;mosip123&quot;,&#xd;
  &quot;Male&quot;: &quot;MLE&quot;,&#xd;
  &quot;getUserHistory&quot;: &quot;/v1/masterdata/users/{id}/{eff_dtimes}&quot;,&#xd;
  &quot;FetchRejectionReason_URI&quot;: &quot;/v1/masterdata/packetrejectionreasons/{reasoncategorycode}/{langcode}&quot;,&#xd;
  &quot;eSignetDeployed&quot;: &quot;yes&quot;,&#xd;
  &quot;userid&quot;: &quot;${userID}&quot;,&#xd;
  &quot;push-reports-to-s3&quot;: &quot;yes&quot;,&#xd;
  &quot;FetchRegCentHolidays_URI&quot;: &quot;/v1/masterdata/getregistrationcenterholidays/{langcode}/{registrationcenterid}/{year}&quot;,&#xd;
  &quot;decrypt_URI&quot;: &quot;/v1/keymanager/decrypt&quot;,&#xd;
  &quot;mosip_resident_client_id&quot;: &quot;mosip-resident-client&quot;,&#xd;
  &quot;s3-region&quot;: &quot;&quot;,&#xd;
  &quot;db-server&quot;: &quot;api-internal.${serverIP}&quot;,&#xd;
  &quot;mosip_pms_app_id&quot;: &quot;partner&quot;,&#xd;
  &quot;syncConf&quot;: &quot;/v1/syncdata/configs&quot;,&#xd;
  &quot;getRoles&quot;: &quot;/v1/syncdata/roles&quot;,&#xd;
  &quot;admin_zone_clientSecret&quot;: &quot;5xyAl2JF29ttnxJo&quot;,&#xd;
  &quot;FetchApplication_URI&quot;: &quot;/v1/masterdata/applicationtypes&quot;,&#xd;
  &quot;langselect&quot;: &quot;0&quot;,&#xd;
  &quot;fetchAllTemplate&quot;: &quot;/v1/masterdata/templates/templatetypecodes/{code}&quot;,&#xd;
  &quot;s3-host&quot;: &quot;http://minio.minio:9000&quot;,&#xd;
  &quot;invalidEncryptedHashFlag&quot;: &quot;&quot;,&#xd;
  &quot;FetchTitle_URI&quot;: &quot;/v1/masterdata/title/{langcode}&quot;,&#xd;
  &quot;scenariosToSkip&quot;: &quot;S-AFTER_SUITE,S-157&quot;,&#xd;
  &quot;admin_zone_password&quot;: &quot;mosip123&quot;,&#xd;
  &quot;FetchRegCent_id_lang_URI&quot;: &quot;/v1/masterdata/registrationcenters/{id}/{langcode}&quot;,&#xd;
  &quot;mosip_regprocclient_app_id&quot;: &quot;regproc&quot;,&#xd;
  &quot;ConfigParameters&quot;: &quot;mosip.kernel.rid.length,mosip.kernel.uin.length,mosip.kernel.sms.country.code,mosip.kernel.sms.number.length,mosip.kernel.otp.default-length,mosip.kernel.otp.expiry-time,mosip.kernel.otp.key-freeze-time,mosip.kernel.otp.validation-attempt-threshold,mosip.kernel.otp.min-key-length,mosip.kernel.otp.max-key-length,mosip.kernel.licensekey.length,mosip.supported-languages&quot;,&#xd;
  &quot;fetchmapLicenseKey&quot;: &quot;/v1/keymanager/license/permission&quot;,&#xd;
  &quot;useExternalScenarioSheet&quot;: &quot;no&quot;,&#xd;
  &quot;getusersBasedOnRegCenter&quot;: &quot;/v1/syncdata/userdetails/{regid}&quot;,&#xd;
  &quot;actuatorIDAEndpoint&quot;: &quot;/idauthentication/v1/actuator/env&quot;,&#xd;
  &quot;FetchLocationHierarchy_URI_hierarchyname&quot;: &quot;/v1/masterdata/locations/locationhierarchy/{hierarchyname}&quot;,&#xd;
  &quot;audit_username&quot;: &quot;postgres&quot;,&#xd;
  &quot;auditLog_URI&quot;: &quot;/v1/auditmanager/audits&quot;,&#xd;
  &quot;eSignetbaseurl&quot;: &quot;https://api.${serverIP}&quot;,&#xd;
  &quot;tokenEndpoint&quot;: &quot;/v1/esignet/oauth/token&quot;,&#xd;
  &quot;admin_userName&quot;: &quot;sanjay0&quot;,&#xd;
  &quot;FetchRegcentMachUserMaping_URI&quot;: &quot;/v1/masterdata/getregistrationmachineusermappinghistory/{effdtimes}/{registrationcenterid}/{machineid}/{userid}&quot;,&#xd;
  &quot;machineid&quot;: &quot;${machineID}&quot;,&#xd;
  &quot;scenario&quot;: &quot;2:Resident walk-ins to registration center completes the process and gets UIN card&quot;,&#xd;
  &quot;partner_userName&quot;: &quot;111997&quot;,&#xd;
  &quot;Female&quot;: &quot;FLE&quot;,&#xd;
  &quot;FetchApplication_lang_URI&quot;: &quot;/v1/masterdata/applicationtypes/{langcode}&quot;,&#xd;
  &quot;uin&quot;: &quot;UIN&quot;,&#xd;
  &quot;show_sql&quot;: &quot;true&quot;,&#xd;
  &quot;hibernate.connection.driver_class&quot;: &quot;org.postgresql.Driver&quot;,&#xd;
  &quot;pmsAuthInternal&quot;: &quot;true&quot;,&#xd;
  &quot;FetchDevice_lang_URI&quot;: &quot;/v1/masterdata/devices/{languagecode}&quot;,&#xd;
  &quot;FetchDocumentCategories_URI_withcodeAndLangCode&quot;: &quot;/v1/masterdata/documentcategories/{code}/{langcode}&quot;,&#xd;
  &quot;usePreConfiguredEmail&quot;: &quot;prereg-dsl9@gmail.com&quot;,&#xd;
  &quot;pool_size&quot;: &quot;1&quot;,&#xd;
  &quot;actuatorRegprocEndpoint&quot;: &quot;/registrationprocessor/v1/registrationtransaction/actuator/env&quot;,&#xd;
  &quot;FetchMachineHistory_URI&quot;: &quot;/v1/masterdata/machineshistories/{id}/{langcode}/{effdatetimes}&quot;,&#xd;
  &quot;mosip_reg_client_id&quot;: &quot;mosip-reg-client&quot;,&#xd;
  &quot;bulkUploadUrl&quot;: &quot;/v1/admin/bulkupload&quot;,&#xd;
  &quot;new_Resident_User&quot;: &quot;111995&quot;,&#xd;
  &quot;email_otp&quot;: &quot;111111&quot;,&#xd;
  &quot;mosip_idrepo_app_id&quot;: &quot;idrepo&quot;,&#xd;
  &quot;esignetMockBaseURL&quot;: &quot;esignet-insurance.&quot;,&#xd;
  &quot;keycloakAuthURL&quot;: &quot;/auth/realms/master/protocol/openid-connect/token&quot;,&#xd;
  &quot;packetUtilityBaseUrl&quot;: &quot;http://packetcreator.packetcreator/v1/packetcreator&quot;,&#xd;
  &quot;zoneNameUrl&quot;: &quot;/v1/masterdata/zones/zonename&quot;,&#xd;
  &quot;FetchRegCent_URI&quot;: &quot;/v1/masterdata/registrationcenters&quot;,&#xd;
  &quot;mosip.test.persona.facedatapath&quot;: &quot;/profile_resource/face_data&quot;,&#xd;
  &quot;Other&quot;: &quot;OTH&quot;,&#xd;
  &quot;sendOtp&quot;: &quot;/v1/authmanager/authenticate/sendotp&quot;,&#xd;
  &quot;dialect&quot;: &quot;org.hibernate.dialect.PostgreSQLDialect&quot;,&#xd;
  &quot;partner_username&quot;: &quot;postgres&quot;,&#xd;
  &quot;DB_PORT&quot;: &quot;&quot;,&#xd;
  &quot;audit_url&quot;: &quot;jdbc:postgresql://api-internal.dev2.mosip.net:30090/mosip_audit&quot;,&#xd;
  &quot;s3-account&quot;: &quot;dslreports&quot;,&#xd;
  &quot;mosip.test.persona.templatesdatapath&quot;: &quot;/profile_resource/templates_data&quot;,&#xd;
  &quot;FetchDevice_id_lang_URI&quot;: &quot;/v1/masterdata/devices/{languagecode}/{deviceType}&quot;,&#xd;
  &quot;syncMdatawithRegCentIdKeyIndex&quot;: &quot;/v1/syncdata/clientsettings/{regcenterid}&quot;,&#xd;
  &quot;userzonecode&quot;: &quot;TZT&quot;,&#xd;
  &quot;mountPathForScenario&quot;: &quot;/home/mosip/mountvolume/&quot;,&#xd;
  &quot;introducerBiometrics&quot;: &quot;introducerBiometrics&quot;,&#xd;
  &quot;updatePreRegStatus&quot;: &quot;preregistration/v1/applications/prereg/status/&quot;,&#xd;
  &quot;FetchDocumentCategories_URI&quot;: &quot;/v1/masterdata/documentcategories/{langcode}&quot;,&#xd;
  &quot;validateGenderByName&quot;: &quot;/v1/masterdata/gendertypes/validate/{gendername}&quot;,&#xd;
  &quot;mosip_idrepo_client_id&quot;: &quot;mosip-idrepo-client&quot;,&#xd;
  &quot;mosip.test.regclient.supervisorid&quot;: &quot;${userID}&quot;,&#xd;
  &quot;FetchHolidays_id_lang_URI&quot;: &quot;/v1/masterdata/holidays/{holidayid}/{langcode}&quot;,&#xd;
  &quot;FetchGenderType_id_lang_URI&quot;: &quot;/v1/masterdata/gendertypes/{langcode}&quot;,&#xd;
  &quot;actuatorMasterDataEndpoint&quot;: &quot;/v1/masterdata/actuator/env&quot;,&#xd;
  &quot;mosip_resident_app_id&quot;: &quot;resident&quot;,&#xd;
  &quot;ridStageStatus&quot;: &quot;v1/admin/packetstatusupdate&quot;,&#xd;
  &quot;getIndividualType&quot;: &quot;/v1/masterdata/individualtypes&quot;,&#xd;
  &quot;getDocType_DocCatByAppID&quot;: &quot;/v1/masterdata/applicanttype/{applicantId}/languages&quot;,&#xd;
  &quot;FetchRegCent_loc_lang_URI&quot;: &quot;/v1/masterdata/getlocspecificregistrationcenters/{langcode}/{locationcode}&quot;,&#xd;
  &quot;threadCount&quot;: &quot;8&quot;,&#xd;
  &quot;FetchHolidays_id_URI&quot;: &quot;/v1/masterdata/holidays/{holidayid}&quot;,&#xd;
  &quot;consent&quot;: &quot;&quot;,&#xd;
  &quot;mosip_pms_client_id&quot;: &quot;mosip-pms-client&quot;,&#xd;
  &quot;FetchApplication_id_lang_URI&quot;: &quot;/v1/masterdata/applicationtypes/{code}/{langcode}&quot;,&#xd;
  &quot;IDSchemaVersion&quot;: &quot;IDSchemaVersion&quot;,&#xd;
  &quot;mosip_testrig_client_id&quot;: &quot;mosip-testrig-client&quot;,&#xd;
  &quot;mosip_hotlist_client_id&quot;: &quot;mosip-hotlist-client&quot;,&#xd;
  &quot;name&quot;: &quot;fullName&quot;,&#xd;
  &quot;mosip.test.regclient.userid&quot;: &quot;${userID}&quot;,&#xd;
  &quot;introducerName&quot;: &quot;introducerName&quot;,&#xd;
  &quot;FetchLocationHierarchy_URI_locationcode&quot;: &quot;/v1/masterdata/locations/{locationcode}/{langcode}&quot;,&#xd;
  &quot;roles&quot;: &quot;GLOBAL_ADMIN,ID_AUTHENTICATION,REGISTRATION_ADMIN,REGISTRATION_SUPERVISOR,ZONAL_ADMIN,AUTH_PARTNER,PARTNER_ADMIN,PMS_ADMIN,POLICYMANAGER,REGISTRATION_SUPERVISOR,DATA_READ&quot;,&#xd;
  &quot;AuthAppID&quot;: &quot;resident&quot;,&#xd;
  &quot;preregValidateOtp&quot;: &quot;/preregistration/v1/login/validateOtp&quot;,&#xd;
  &quot;actuatorEndpoint&quot;: &quot;/resident/v1/actuator/env&quot;,&#xd;
  &quot;new_Resident_Password&quot;: &quot;mosip123&quot;,&#xd;
  &quot;validateBindingEndpoint&quot;: &quot;esignet-binding&quot;,&#xd;
  &quot;getApplicantType&quot;: &quot;/v1/masterdata/getApplicantType&quot;,&#xd;
  &quot;mosip_resident_client_secret&quot;: &quot;Zb3YxTJoCgaPgrV9&quot;,&#xd;
  &quot;servicesNotDeployed&quot;: &quot;&quot;,&#xd;
  &quot;auditActuatorEndpoint&quot;: &quot;/v1/auditmanager/actuator/info&quot;,&#xd;
  &quot;AuthClientSecret&quot;: &quot;Zb3YxTJoCgaPgrV9&quot;,&#xd;
  &quot;FetchLocationHierarchy_URI_withlangCode&quot;: &quot;/v1/masterdata/locations/{langcode}&quot;,&#xd;
  &quot;reportLogPath&quot;: &quot;automationLogAndReport&quot;,&#xd;
  &quot;mosip_regclient_app_id&quot;: &quot;registrationclient&quot;,&#xd;
  &quot;FetchBlackListedWord_URI&quot;: &quot;/v1/masterdata/blacklistedwords/{langcode}&quot;,&#xd;
  &quot;invalidCertFlag&quot;: false,&#xd;
  &quot;mosip.test.baseurl&quot;: &quot;https://api-internal.${serverIP}/&quot;,&#xd;
  &quot;mountPath&quot;: &quot;${mountPath}&quot;,&#xd;
  &quot;mosip.version&quot;: &quot;1.2&quot;,&#xd;
  &quot;mosip_idrepo_client_secret&quot;: &quot;CcCyCoMWEVDKM10I&quot;,&#xd;
  &quot;keycloak-realm-id&quot;: &quot;mosip&quot;,&#xd;
  &quot;mosip.test.persona.irisdatapath&quot;: &quot;/profile_resource/iris_data/&quot;,&#xd;
  &quot;invalidCheckSum&quot;: &quot;&quot;,&#xd;
  &quot;prereg.password&quot;: &quot;Techno@123&quot;,&#xd;
  &quot;s3-user-secret&quot;: &quot;minioadmin&quot;,&#xd;
  &quot;prereg.operatorId&quot;: &quot;${userID}&quot;,&#xd;
  &quot;esignetWellKnownEndPoint&quot;: &quot;/v1/esignet/oidc/.well-known/openid-configuration&quot;,&#xd;
  &quot;preregSendOtp&quot;: &quot;/preregistration/v1/login/sendOtp/langcode&quot;,&#xd;
  &quot;publicKey&quot;: &quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnkuJmoLUkpO5nGlLs8nZdpdzMHsBv03DQTqBZzxNgmE6H1FGIupdQwAflmE68btbAzJmmwyvOBCbjtyntyP6Zaf1Z2dzV8olFlCPaBXDCgckJzIXxxQnGYzgRfjmCvywnvLAGochqQmimxGejtS+5thU0FX//0p1WU4Zi7pzptOLb4jrXCPoBMZ5sbCGycgMyml5Q5dNtRIvMUvw6zGXutU+9fYiVFQ3d0SdJMXk15ygXyydvRLaYZ7gUdoIu7nbFV1eONJbtmsi+OVZrdc2+UzPqTHVRr1ovYUTOkm7Kz39QmlxeRo8Aos3keCIgjZTl/zH+nFJwQLm+STiLhEkiwIDAQAB&quot;,&#xd;
  &quot;mosip_admin_client_secret&quot;: &quot;5xyAl2JF29ttnxJo&quot;,&#xd;
  &quot;attempt&quot;: &quot;10&quot;,&#xd;
  &quot;centerId1&quot;: &quot;${centerID}&quot;,&#xd;
  &quot;usermasterdata-0&quot;: &quot;masterdata-sanjay0&quot;,&#xd;
  &quot;fetchImmediateChildLocation&quot;: &quot;/v1/masterdata/locations/immediatechildren/{locationcode}/{langcode}&quot;,&#xd;
  &quot;fetchIncrementalData&quot;: &quot;/v1/syncjob/syncjobdef&quot;,&#xd;
  &quot;s3-user-key&quot;: &quot;admin&quot;,&#xd;
  &quot;uingenerator&quot;: &quot;/v1/idgenerator/uin&quot;,&#xd;
  &quot;keycloak_Password&quot;: &quot;uXEhXDVZyW&quot;,&#xd;
  &quot;reportExpirationInDays&quot;: &quot;3&quot;,&#xd;
  &quot;preconfiguredOtp&quot;: &quot;111111&quot;,&#xd;
  &quot;mosip.test.persona.documentsdatapath&quot;: &quot;/profile_resource/documents_data/templates/&quot;,&#xd;
  &quot;fetchmasterdata&quot;: &quot;/v1/syncdata/masterdata&quot;,&#xd;
  &quot;FetchHolidays_URI&quot;: &quot;/v1/masterdata/holidays&quot;,&#xd;
  &quot;generatePrivateKey&quot;: false,&#xd;
  &quot;RIDGenerator_URI&quot;: &quot;/v1/ridgenerator/generate/rid/{centerid}/{machineid}&quot;,&#xd;
  &quot;FetchDeviceSpec_id_lang_URI&quot;: &quot;/v1/masterdata/devicespecifications/{langcode}/{devicetypecode}&quot;,&#xd;
  &quot;audit_password&quot;: &quot;G7zMqBaSJg&quot;,&#xd;
  &quot;introducerRID&quot;: &quot;introducerRID&quot;,&#xd;
  &quot;regclient.centerid&quot;: &quot;${centerID}&quot;,&#xd;
  &quot;mosip_hotlist_app_id&quot;: &quot;hotlist&quot;,&#xd;
  &quot;zoneMappingUrl&quot;: &quot;/v1/masterdata/zoneuser&quot;,&#xd;
  &quot;zoneMappingActivateUrl&quot;: &quot;/v1/masterdata/zoneuser&quot;,&#xd;
  &quot;urlBase&quot;: &quot;https://api-internal.${serverIP}/&quot;,&#xd;
  &quot;authCertsPath&quot;: &quot;${authCertsPath}&quot;,&#xd;
  &quot;new_Resident_Role&quot;: &quot;default-roles-mosip,PARTNER_ADMIN&quot;,&#xd;
  &quot;dob&quot;: &quot;dateOfBirth&quot;,&#xd;
  &quot;db-su-user&quot;: &quot;postgres&quot;,&#xd;
  &quot;keycloak-external-url&quot;: &quot;https://iam.${ServerIP}&quot;,&#xd;
  &quot;pwd&quot;: &quot;Techno@123&quot;,&#xd;
  &quot;fetchRegCenter&quot;: &quot;/v1/masterdata/registrationcenters/validate/{id}/{langCode}/{timestamp}&quot;,&#xd;
  &quot;zoneCode&quot;: &quot;TZT&quot;,&#xd;
  &quot;postgresqlUser&quot;: &quot;postgresql&quot;,&#xd;
  &quot;gender&quot;: &quot;gender&quot;,&#xd;
  &quot;uploadpublickey&quot;: &quot;/v1/syncdata/tpm/publickey&quot;,&#xd;
  &quot;admin_zone_userName&quot;: &quot;globaladmin&quot;,&#xd;
  &quot;langCode&quot;: &quot;eng&quot;,&#xd;
  &quot;getRIDByUserId&quot;: &quot;/v1/authmanager/rid/{appid}/{userid}&quot;,&#xd;
  &quot;master_db_schema&quot;: &quot;master&quot;,&#xd;
  &quot;mosip_admin_client_id&quot;: &quot;mosip-admin-client&quot;,&#xd;
  &quot;otpNotifier&quot;: &quot;/v1/otpnotifier/otp/send&quot;,&#xd;
  &quot;resident_esignet&quot;: &quot;v1/esignet/actuator/health&quot;,&#xd;
  &quot;SyncPublicKeyToRegClient_URI&quot;: &quot;/v1/keymanager/publickey/&quot;,&#xd;
  &quot;validateLocationByName&quot;: &quot;/v1/masterdata/locations/validate/{locationname}&quot;,&#xd;
  &quot;individualBiometrics&quot;: &quot;individualBiometrics&quot;,&#xd;
  &quot;FetchRegCent_prox_lang_URI&quot;: &quot;/v1/masterdata/getcoordinatespecificregistrationcenters/{langcode}/{longitude}/{latitude}/{proximitydistance}&quot;,&#xd;
  &quot;mosip_reg_client_secret&quot;: &quot;jpwOwsHL6lZmDDNS&quot;,&#xd;
  &quot;userCenterMappingUrl&quot;: &quot;/v1/masterdata/usercentermapping&quot;,&#xd;
  &quot;machineSpecId&quot;: &quot;0c0e49eb-7b05-453e-a107-083ec51f8586&quot;,&#xd;
  &quot;invalidIdSchemaFlag&quot;: &quot;&quot;,&#xd;
  &quot;hibernate.current_session_context_class&quot;: &quot;thread&quot;,&#xd;
  &quot;FetchRegCentHistory_URI&quot;: &quot;/v1/masterdata/registrationcentershistory/{registrationCenterId}/{langcode}/{effectiveDate}&quot;,&#xd;
  &quot;user1&quot;: &quot;${userID}&quot;,&#xd;
  &quot;ida_db_schema&quot;: &quot;ida&quot;,&#xd;
  &quot;user0&quot;: &quot;sanjay0&quot;,&#xd;
  &quot;appendedkey&quot;: &quot;1&quot;,&#xd;
  &quot;partner_url&quot;: &quot;jdbc:postgresql://api-internal.dev2.mosip.net:30090/mosip_ida&quot;,&#xd;
  &quot;licKeyGenerator&quot;: &quot;/v1/keymanager/license/generate&quot;,&#xd;
  &quot;FetchGenderType_URI&quot;: &quot;/v1/masterdata/gendertypes&quot;,&#xd;
  &quot;installation-domain&quot;: &quot;&quot;,&#xd;
  &quot;mosip_hotlist_client_secret&quot;: &quot;nnEhTOcpGW83WFAS&quot;,&#xd;
  &quot;FetchMachine_URI&quot;: &quot;/v1/masterdata/machines&quot;,&#xd;
  &quot;iam-users-to-create&quot;: &quot;111997,111998,220005,111992,globaladmin&quot;,&#xd;
  &quot;syncMdatawithKeyIndex&quot;: &quot;/v1/syncdata/clientsettings&quot;,&#xd;
  &quot;actuatorAdminEndpoint&quot;: &quot;/v1/admin/actuator/env&quot;,&#xd;
  &quot;FetchBiometricAttribute_URI&quot;: &quot;/v1/masterdata/getbiometricattributesbyauthtype/{langcode}/{biometrictypecode}&quot;,&#xd;
  &quot;encrypt_URI&quot;: &quot;/v1/keymanager/encrypt&quot;,&#xd;
  &quot;hibernate.connection.pool_size&quot;: &quot;1&quot;,&#xd;
  &quot;partner_password&quot;: &quot;G7zMqBaSJg&quot;,&#xd;
  &quot;reportIgnoredTestCases&quot;: &quot;no&quot;,&#xd;
  &quot;hibernate.dialect&quot;: &quot;org.hibernate.dialect.PostgreSQLDialect&quot;,&#xd;
  &quot;mosip_regproc_client_id&quot;: &quot;mosip-regproc-client&quot;,&#xd;
  &quot;emailId&quot;: &quot;email&quot;,&#xd;
  &quot;OTPValidation&quot;: &quot;/v1/otpmanager/otp/validate&quot;,&#xd;
  &quot;machineName&quot;: &quot;DSL0327152708202&quot;,&#xd;
  &quot;userpassword&quot;: &quot;Techno@123&quot;,&#xd;
  &quot;EmailNotification_URI&quot;: &quot;/v1/notifier/email/send&quot;,&#xd;
  &quot;roles.111995&quot;: &quot;PARTNER_ADMIN,default-roles-mosip&quot;,&#xd;
  &quot;otpTargetEmail&quot;: &quot;prereg-dsl9@gmail.com&quot;,&#xd;
  &quot;roles.111997&quot;: &quot;AUTH_PARTNER,PARTNER_ADMIN,PMS_ADMIN,POLICYMANAGER,REGISTRATION_SUPERVISOR&quot;,&#xd;
  &quot;current_session_context_class&quot;: &quot;thread&quot;,&#xd;
  &quot;currentUserURI&quot;: &quot;/#/uinservices/viewhistory&quot;,&#xd;
  &quot;fetchDeviceHistory&quot;: &quot;/v1/masterdata/deviceshistories/{id}/{langcode}/{effdatetimes}&quot;,&#xd;
  &quot;driver_class&quot;: &quot;org.postgresql.Driver&quot;,&#xd;
  &quot;templateIDMeta&quot;: &quot;/profile_resource/templates_data/IDMetaInfo.json&quot;,&#xd;
  &quot;FetchTemplate_lang_URI&quot;: &quot;/v1/masterdata/templates/{langcode}&quot;,&#xd;
  &quot;FetchMachine_id_lang_URI&quot;: &quot;/v1/masterdata/machines/{id}/{langcode}&quot;,&#xd;
  &quot;audit_default_schema&quot;: &quot;audit&quot;,&#xd;
  &quot;db-port&quot;: &quot;5432&quot;,&#xd;
  &quot;pms_db_schema&quot;: &quot;pms&quot;,&#xd;
  &quot;uploaddocument&quot;: &quot;preregistration/v1/documents/&quot;,&#xd;
  &quot;iam-users-password&quot;: &quot;mosip123,mosip123,mosip123,mosip123,mosip123&quot;,&#xd;
  &quot;admin_password&quot;: &quot;Techno@123&quot;,&#xd;
  &quot;authDemoServicePort&quot;: &quot;80&quot;,&#xd;
  &quot;getDocTypeDocCatByLangCode&quot;: &quot;/v1/masterdata/validdocuments/{languagecode}&quot;,&#xd;
  &quot;FetchIDlist_URI&quot;: &quot;/v1/masterdata/idtypes/{langcode}&quot;,&#xd;
  &quot;audit_db_schema&quot;: &quot;audit&quot;,&#xd;
  &quot;mosip.test.regclient.centerid&quot;: &quot;${centerID}&quot;,&#xd;
  &quot;FetchMachine_lang_URI&quot;: &quot;/v1/masterdata/machines/{langcode}&quot;,&#xd;
  &quot;CentetMachineUserMappingToMasterData_uri&quot;: &quot;/v1/masterdata/registrationmachineusermappings&quot;,&#xd;
  &quot;fetchmasterdatawithRID&quot;: &quot;/v1/syncdata/masterdata/{regcenterId}&quot;,&#xd;
  &quot;OTPGeneration&quot;: &quot;/v1/otpmanager/otp/generate&quot;,&#xd;
  &quot;AuthClientID&quot;: &quot;mosip-resident-client&quot;,&#xd;
  &quot;FetchRegCent_hir_name_lang_URI&quot;: &quot;/v1/masterdata/registrationcenters/{langcode}/{hierarchylevel}/{name}&quot;,&#xd;
  &quot;mosip.test.temp&quot;: &quot;/packets/&quot;,&#xd;
  &quot;authenticationInternal&quot;: &quot;/v1/authmanager/authenticate/internal/useridPwd&quot;,&#xd;
  &quot;enableDebug&quot;: &quot;no&quot;,&#xd;
  &quot;km_db_schema&quot;: &quot;keymgr&quot;,&#xd;
  &quot;FetchTemplate_id_lang_URI&quot;: &quot;/v1/masterdata/templates/{langcode}/{templatetypecode}&quot;,&#xd;
  &quot;postgresql-password&quot;: &quot;797mKZO1Bo&quot;,&#xd;
  &quot;scenariosToExecute&quot;: &quot;2&quot;,&#xd;
  &quot;keycloak_UserName&quot;: &quot;admin&quot;,&#xd;
  &quot;FetchTemplate_URI&quot;: &quot;/v1/masterdata/templates&quot;,&#xd;
  &quot;changeSupervisorNameToDiffCase&quot;: false,&#xd;
  &quot;SmsNotification_URI&quot;: &quot;/v1/notifier/sms/send&quot;,&#xd;
  &quot;introducerUIN&quot;: &quot;introducerUIN&quot;,&#xd;
  &quot;mosip_admin_app_id&quot;: &quot;admin&quot;,&#xd;
  &quot;FetchBiometricAuthType_URI&quot;: &quot;/v1/masterdata/biometrictypes/{langcode}&quot;,&#xd;
  &quot;fetchRegistrationCenterDeviceHistory&quot;: &quot;/v1/masterdata/registrationcenterdevicehistory/{regcenterid}/{deviceid}/{effdatetimes}&quot;,&#xd;
  &quot;master_default_schema&quot;: &quot;master&quot;,&#xd;
  &quot;OTPTimeOut&quot;: &quot;181&quot;,&#xd;
  &quot;hibernate.show_sql&quot;: &quot;true&quot;,&#xd;
  &quot;mosip.test.persona.fingerprintdatapath&quot;: &quot;/profile_resource/fp_data&quot;,&#xd;
  &quot;admin_zone_appid&quot;: &quot;admin&quot;,&#xd;
  &quot;mosip_pms_client_secret&quot;: &quot;htdFIZiSw0dsVjSY&quot;,&#xd;
  &quot;mosip.test.prereg.centerid&quot;: &quot;10005&quot;,&#xd;
  &quot;mosip.test.persona.namesdatapath&quot;: &quot;/profile_resource/names_data&quot;,&#xd;
  &quot;mosip_testrig_client_secret&quot;: &quot;zVqU7P4wIqT5rSfs&quot;,&#xd;
  &quot;authentication&quot;: &quot;/v1/authmanager/authenticate/useridPwd&quot;,&#xd;
  &quot;policytest_userName&quot;: &quot;111998&quot;,&#xd;
  &quot;authDemoServiceBaseURL&quot;: &quot;http://authdemo.authdemo&quot;,&#xd;
  &quot;useridOTP&quot;: &quot;/v1/authmanager/authenticate/useridOTP&quot;,&#xd;
  &quot;partner_default_schema&quot;: &quot;partner&quot;,&#xd;
  &quot;policytest_password&quot;: &quot;mosip123&quot;,&#xd;
  &quot;usePreConfiguredOtp&quot;: &quot;true&quot;,&#xd;
  &quot;FetchDocumentTypes_URI&quot;: &quot;/v1/masterdata/documenttypes/{documentcategorycode}/{langcode}&quot;,&#xd;
  &quot;authclientidsecretkeyURL&quot;: &quot;/v1/authmanager/authenticate/clientidsecretkey&quot;,&#xd;
  &quot;mapLicenseKey&quot;: &quot;/v1/keymanager/license/permission&quot;,&#xd;
  &quot;validUIN&quot;: &quot;createnew&quot;,&#xd;
  &quot;tokenIdGenerator_URI&quot;: &quot;/v1/keymanager/{uin}/{partnercode}&quot;,&#xd;
  &quot;mosip.test.regclient.supervisorpwd&quot;: &quot;Techno@123&quot;,&#xd;
  &quot;mosip.test.regclient.machineid&quot;: &quot;${machineID}&quot;,&#xd;
  &quot;deleteMockAbisExpectations&quot;: &quot;v1/mock-abis-service/config/expectation&quot;,&#xd;
  &quot;mosip.test.regclient.password&quot;: &quot;Techno@123&quot;,&#xd;
  &quot;centerId2&quot;: &quot;10424&quot;,&#xd;
  &quot;user2&quot; : &quot;sanjay2&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${packetUtilityServerIP}</stringProp>
          <stringProp name="HTTPSampler.port">${packetUtilityPortNo}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v1/packetcreator/context/server/${contextKeyValue}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3569038">true</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Context Key Creation" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def contextKeyDemo = &quot;api-internal.cellbox1.mosip.net_S0${__threadNum}_context&quot;
vars.put(&apos;contextKeyValue&apos;,contextKeyDemo)</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${packetCreationCount}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Persona Endpoint" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;requests&quot;: {&#xd;
    &quot;PR_ResidentAttribute&quot;: {&#xd;
      &quot;Iris&quot;: &quot;true&quot;,&#xd;
      &quot;Finger&quot;: &quot;true&quot;,&#xd;
      &quot;Gender&quot;: &quot;Female&quot;,&#xd;
      &quot;Face&quot;: &quot;true&quot;,&#xd;
      &quot;Age&quot;: &quot;RA_Adult&quot;&#xd;
    }&#xd;
  }&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${packetUtilityServerIP}</stringProp>
            <stringProp name="HTTPSampler.port">${packetUtilityPortNo}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/packetcreator/resident/1/${contextKeyValue}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="1652716397">&quot;status&quot;:&quot;SUCCESS</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Persona Path" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">personaPath</stringProp>
              <stringProp name="RegexExtractor.regex">path&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">personaPath not found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add Document To Persona Endpoint " enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">[{&quot;personaFilePath&quot;:&quot;${personaPath}&quot;,&quot;updateAttributeList&quot;:{ &quot;POA&quot;: &quot;{\&quot;typeCode\&quot;: \&quot;DOC016\&quot;,\&quot;docPath\&quot;: \&quot;${docPath}\&quot;}&quot;}}]&#xd;
&#xd;
&#xd;
&#xd;
&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${packetUtilityServerIP}</stringProp>
            <stringProp name="HTTPSampler.port">${packetUtilityPortNo}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/packetcreator/persona/regenerateOrMissingAttribute/${contextKeyValue}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-585137058">{Sucess}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Packet Template Endpoint" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;personaFilePath&quot;: [&#xd;
    &quot;${personaPath}&quot;&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${packetUtilityServerIP}</stringProp>
            <stringProp name="HTTPSampler.port">${packetUtilityPortNo}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/v1/packetcreator/packet/template/${process}/81/true/${contextKeyValue}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-644104290">{&quot;path&quot;:&quot;</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Template Path" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">templatePath</stringProp>
              <stringProp name="RegexExtractor.regex">path&quot;:&quot;(.*?)&quot;,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">templatePath not found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Zip Packet Endpoint" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;process&quot;: &quot;${process}&quot;,&#xd;
  &quot;idJsonPath&quot;: &quot;${templatePath}/REGISTRATION_CLIENT/NEW/rid_id/ID.json&quot;,&#xd;
  &quot;source&quot;: &quot;REGISTRATION_CLIENT&quot;,&#xd;
  &quot;templatePath&quot;: &quot;${templatePath}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${packetUtilityServerIP}</stringProp>
            <stringProp name="HTTPSampler.port">${packetUtilityPortNo}</stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">v1/packetcreator/packetcreator/${contextKeyValue}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract packetPath" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">packetPath</stringProp>
              <stringProp name="RegexExtractor.regex">(?s)(^.+$)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">packetPath not found</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Replacing Slashes from temp packetPath" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">import java.io.File;
import java.io.IOException;
import org.apache.commons.io.FileUtils;


String file = vars.get(&quot;packetPath&quot;);
String path = file.replaceAll(&quot;\\\\&quot;, &quot;/&quot;);
vars.put(&quot;newPath&quot;, path);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Packet Path to file " enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">${__StringToFile(${runTimeFilePath}/store_packet_path1.txt,${newPath}\,${process}\,${contextKeyValue}\n,true,)}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sync Registration Packet - v2 (Setup)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Generate packetPath From File" enabled="true">
          <stringProp name="filename">${runTimeFilePath}/store_packet_path1.txt</stringProp>
          <stringProp name="fileEncoding">UTF-8</stringProp>
          <stringProp name="variableNames">loadpacketPath,process,contextKeyValue</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sync Registration Packet Endpoint" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;process&quot;:&quot;${process}&quot;,&quot;phone&quot;:&quot;phone&quot;,&quot;name&quot;:&quot;name&quot;,&quot;supervisorComment&quot;:&quot;supervisorComment&quot;,&quot;containerPath&quot;:&quot;${loadpacketPath}&quot;,&quot;supervisorStatus&quot;:&quot;APPROVED&quot;,&quot;email&quot;:&quot;email&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${packetUtilityServerIP}</stringProp>
          <stringProp name="HTTPSampler.port">${packetUtilityPortNo}</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">v1/packetcreator/ridsyncreq/${contextKeyValue}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">cookie</stringProp>
                <stringProp name="Header.value">Authorization=${authTokenRegproc}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-291122140">{&quot;headers&quot;:{</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Time Stamp" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">timeStamp</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;timestamp&quot;:&quot;(.*?)&quot;}</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Center-Machine-RefId Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Machine RefId" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">machineRefId</stringProp>
            <stringProp name="RegexExtractor.regex">Center-Machine-RefId&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Center-Machine-RefId Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Request Body" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">requestBody</stringProp>
            <stringProp name="RegexExtractor.regex">requestBody&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">requestBody Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Request Body To File" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">${__StringToFile(${runTimeFilePath}/request_body_sync_packet.txt,${machineRefId}&amp;${requestBody}&amp;${timeStamp}&amp;${loadpacketPath}\n,true,)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Sync And Upload Registration Packet (Preparation)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">${testDuration}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load Machine-RefId,encryptedData From File" enabled="true">
          <stringProp name="filename">${runTimeFilePath}/request_body_sync_packet.txt</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">machineRefId,encryptedData,timeStamp,uploadLoadpacketPath</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">&amp;</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">false</boolProp>
          <boolProp name="stopThread">true</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Sync Registration Packet - v2 Endpoint" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">&quot;${encryptedData}&quot;</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverIPInternal}</stringProp>
          <stringProp name="HTTPSampler.port">${serverPortNo}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">registrationprocessor/v1/registrationstatus/syncV2</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="content-type" elementType="Header">
                <stringProp name="Header.name">content-type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="cookie" elementType="Header">
                <stringProp name="Header.name">cookie</stringProp>
                <stringProp name="Header.value">Authorization=${authTokenResident}</stringProp>
              </elementProp>
              <elementProp name="Center-Machine-RefId" elementType="Header">
                <stringProp name="Header.name">Center-Machine-RefId</stringProp>
                <stringProp name="Header.value">${machineRefId}</stringProp>
              </elementProp>
              <elementProp name="timestamp" elementType="Header">
                <stringProp name="Header.name">timestamp</stringProp>
                <stringProp name="Header.value">${timeStamp}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1506913836">&quot;errors&quot;:null</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Registration Id" enabled="true">
            <stringProp name="RegexExtractor.useHeaders">false</stringProp>
            <stringProp name="RegexExtractor.refname">regId</stringProp>
            <stringProp name="RegexExtractor.regex">&quot;registrationId&quot;:&quot;(.*?)&quot;</stringProp>
            <stringProp name="RegexExtractor.template">$1$</stringProp>
            <stringProp name="RegexExtractor.default">Registration Id Not Found</stringProp>
            <stringProp name="RegexExtractor.match_number">1</stringProp>
          </RegexExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Upload Registration Packet Endpoint" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="${uploadLoadpacketPath}" elementType="HTTPFileArg">
                <stringProp name="File.path">${uploadLoadpacketPath}</stringProp>
                <stringProp name="File.paramname">file</stringProp>
                <stringProp name="File.mimetype">application/zip</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"></stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${serverIPInternal}</stringProp>
          <stringProp name="HTTPSampler.port">${serverPortNo}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">registrationprocessor/v1/packetreceiver/registrationpackets</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.9,hi;q=0.8,und;q=0.7</stringProp>
              </elementProp>
              <elementProp name="Cache-Control" elementType="Header">
                <stringProp name="Header.name">Cache-Control</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="Connection" elementType="Header">
                <stringProp name="Header.name">Connection</stringProp>
                <stringProp name="Header.value">keep-alive</stringProp>
              </elementProp>
              <elementProp name="Pragma" elementType="Header">
                <stringProp name="Header.name">Pragma</stringProp>
                <stringProp name="Header.value">no-cache</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.77 Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="Cookie" elementType="Header">
                <stringProp name="Header.name">Cookie</stringProp>
                <stringProp name="Header.value">Authorization=${authTokenResident}</stringProp>
              </elementProp>
              <elementProp name="accept" elementType="Header">
                <stringProp name="Header.name">accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1413232827">Packet has reached Packet Receiver</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion - Response Code" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Request Body To File" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">${__StringToFile(${runTimeFilePath}/reg_id.txt,${regId}\n,true,)}</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S01 Secure Zone To Upload Packet" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Secure Zone Notification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secureZoneTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Notification received to securezone	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Upload Packet" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${secureZoneTime}&apos;)) AS response_time_securezone_upload, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UPLOAD_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeSecurezoneToUpload</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">UPLOAD_PACKET	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet is Uploaded to Packet Store</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeSecurezoneToUpload&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S01&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S01 Secure Zone To Upload Packet" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S01}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S01}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S02 Upload Packet To Validate Packet" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Upload Packet" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UPLOAD_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">UploadPacketTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Packet is Uploaded to Packet Store	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Validate Packet" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${UploadPacketTime}&apos;)) AS response_time_upload_validate, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;VALIDATE_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeUploadToValidate</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">VALIDATE_PACKET	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet Validation is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeUploadToValidate&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S02&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S02 Upload Packet To Validate Packet" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA">${responeTime_S02}</stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S02}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S02}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S03 Validate Packet To Packet Classification" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Validate Packet" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;VALIDATE_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">ValidatePacketTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Packet Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Packet Classification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${ValidatePacketTime}&apos;)) AS response_time_validate_classification, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PACKET_CLASSIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeValidateToClassification</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">PACKET_CLASSIFICATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet Classification is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeValidateToClassification&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S03&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S03 Validate Packet To Packet Classification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S03}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S03}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S04 Packet Classification To CMD Validation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Packet Classification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PACKET_CLASSIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">PacketClassificationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Packet Classification is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CMD Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${PacketClassificationTime}&apos;)) AS response_time_CMD_validation, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;CMD_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeClassificationToCMD</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">CMD_VALIDATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	CMD Validation is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeClassificationToCMD&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S04&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S04 Packet Classification To CMD Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S04}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S04}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S05 CMD Validation To Operator Validation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CMD Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;CMD_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">CMDvalidationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">CMD Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Operator Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${CMDvalidationTime}&apos;)) AS response_time_CMD_operator, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;OPERATOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeCMDtoOperatorValidation</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">OPERATOR_VALIDATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	OPERATOR Validation is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeCMDtoOperatorValidation&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S05&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S05 CMD Validation To Operator Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S05}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S05}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S06 Operator Validation To Supervisor Validation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Operator Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;OPERATOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">OperatorValidationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">OPERATOR Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Supervisor Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${OperatorValidationTime}&apos;)) AS response_time_operator_supervisor, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SUPERVISOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeOperatorToSupervisor</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">SUPERVISOR_VALIDATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	SUPERVISOR Validation is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeOperatorToSupervisor&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S06&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S06 Operator Validation To Supervisor Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S06}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S06}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S07 Supervisor Validation To Quality Classifiier" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Supervisor Validation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SUPERVISOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">SupervisorValidationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">SUPERVISOR Validation is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Quality Classifier" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${SupervisorValidationTime}&apos;)) AS response_time_supervisor_quality, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;QUALITY_CLASSIFIER&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeSupervisorToQuality</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">QUALITY_CLASSIFIER	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Biometric Quality Check is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeSupervisorToQuality&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S07&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S07 Supervisor Validation To Quality Classifiier" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S07}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S07}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S08 Quality Classifiier To Demographic Verification" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Quality Classifier" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;QUALITY_CLASSIFIER&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">QualityClassifierTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Biometric Quality Check is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Demographic Verification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${QualityClassifierTime}&apos;)) AS response_time_quality_demo, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;DEMOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeQualityToDemo</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">DEMOGRAPHIC_VERIFICATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Demo Dedupe is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeQualityToDemo&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S08&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S08 Quality Classifiier To Demographic Verification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S08}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S08}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S09 Demographic Verification To Biographic Verification" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Demographic Verification " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;DEMOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">DemoTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Demo Dedupe is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biographic Verification " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${DemoTime}&apos;)) AS response_time_demo_bio, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeDemoToBio</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">BIOGRAPHIC_VERIFICATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Biometric Deduplication is Successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeDemoToBio&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S09&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S09 Demographic Verification To Biographic Verification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S09}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S09}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S10 Biographic Verification To UIN Generation" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biographic Verification " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">BioTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Biometric Deduplication is Successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UIN Generation" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${BioTime}&apos;)) AS response_time_bio_UIN, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UIN_GENERATOR&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeBioToUIN</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">UIN_GENERATOR	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	UIN Generated Successfully</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeBioToUIN&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S10&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S10 Biographic Verification To UIN Generation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S10}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S10}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S11 UIN Generation To Biometric Extraction" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UIN Generation " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;UIN_GENERATOR&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">UinTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">UIN Generated Successfully	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biometric Extraction" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${UinTime}&apos;)) AS response_time_UIN_BioExtract, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOMETRIC_EXTRACTION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeUinToBioExtract</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">BIOMETRIC_EXTRACTION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	biometric extaction was successful</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeUinToBioExtract&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S11&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S11 UIN Generation To Biometric Extraction" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S11}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S11}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S12 Biometric Extraction To Finalization" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biometric Extraction " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;BIOMETRIC_EXTRACTION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">BioExtractTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">biometric extaction was successful	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Finalization" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${BioExtractTime}&apos;)) AS response_time_BioExtract_final, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;FINALIZATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeBioExtractToFinal</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">FINALIZATION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	idrepo draft was published  successfuly</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeBioExtractToFinal&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S12&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S12 Biometric Extraction To Finalization" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S12}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S12}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S13 Finalization To Print Service" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Finalization" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;FINALIZATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">FinalizationTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">idrepo draft was published  successfuly	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Print Service" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${FinalizationTime}&apos;)) AS response_time_final_print, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PRINT_SERVICE&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeFinalToPrint</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">PRINT_SERVICE	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Print request submitted</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeFinalToPrint&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S13&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S13 Finalization To Print Service" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S13}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S13}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S14 Print Service To Internal Workflow Action" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Print Service" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;PRINT_SERVICE&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">PrintTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Print request submitted	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Internal Workflow Action" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${PrintTime}&apos;)) AS response_time_print_IWA, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;INTERNAL_WORKFLOW_ACTION&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimePrintToIWA</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">INTERNAL_WORKFLOW_ACTION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet processing completed </stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimePrintToIWA&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S14&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S14 Print Service To Internal Workflow Action" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S14}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S14}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S15 Complete Reg Proc Packet Processing " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Secure Zone Notification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, status_code, sub_status_code, status_comment, cr_dtimes, cr_by, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secureZoneTime</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">Notification received to securezone	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_SYSTEM</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT Found</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Internal Workflow Action" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, sub_status_code, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes, trn_type_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${secureZoneTime}&apos;)) AS response_time_secureZone_IWA, status_comment
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;INTERNAL_WORKFLOW_ACTION&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
            <stringProp name="BoundaryExtractor.refname">responseTimeSecureToIWA</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">INTERNAL_WORKFLOW_ACTION	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	Packet processing completed </stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def response_time = vars.get(&quot;responseTimeSecureToIWA&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;responeTime_S15&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S15 Complete Reg Proc Packet Processing " enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
          <stringProp name="RESPONSE_DATA"></stringProp>
          <stringProp name="RESPONSE_TIME">${responeTime_S15}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">${responeTime_S15}</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S16 End to End Packet and Credential Processing " enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reg Proc Secure Zone Notification" enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, trn_type_code, sub_status_code, status_comment, status_code, cr_by, cr_dtimes, upd_by, upd_dtimes
	FROM regprc.registration_transaction where reg_id = &apos;${reg_id}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1149187101">SUCCESS</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">secure_zone_start_time</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">MOSIP_SYSTEM	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP_</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
            <stringProp name="BoundaryExtractor.useHeaders">false</stringProp>
            <stringProp name="BoundaryExtractor.refname">success</stringProp>
            <stringProp name="BoundaryExtractor.lboundary">securezone	</stringProp>
            <stringProp name="BoundaryExtractor.rboundary">	MOSIP</stringProp>
            <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
            <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
            <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </BoundaryExtractor>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Success" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${success}&quot; == &quot;SUCCESS&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Credential Transaction" enabled="true">
            <stringProp name="dataSource">credential_connection</stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="query">SELECT id, issuancedate, cr_by, cr_dtimes, status_code, EXTRACT(EPOCH FROM (cr_dtimes - &apos;${secure_zone_start_time}&apos;)) AS response_time
	FROM credential.credential_transaction where id = &apos;${reg_id}-PDF&apos; and status_code = &apos;STORED&apos;;</stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultSetMaxRows"></stringProp>
          </JDBCSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="3355">id</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
            <BoundaryExtractor guiclass="BoundaryExtractorGui" testclass="BoundaryExtractor" testname="Boundary Extractor" enabled="true">
              <stringProp name="BoundaryExtractor.useHeaders">unescaped</stringProp>
              <stringProp name="BoundaryExtractor.refname">responsetime</stringProp>
              <stringProp name="BoundaryExtractor.lboundary">STORED	</stringProp>
              <stringProp name="BoundaryExtractor.rboundary"></stringProp>
              <stringProp name="BoundaryExtractor.default">NOT_FOUND</stringProp>
              <boolProp name="BoundaryExtractor.default_empty_value">false</boolProp>
              <stringProp name="BoundaryExtractor.match_number">1</stringProp>
            </BoundaryExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Store Response time to files" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">${__StringToFile(./store_response_time.jtl,${responsetime}\n,true,)}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">prev.setIgnore()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def response_time = vars.get(&quot;responsetime&quot;)
float a = response_time.toFloat()
float b = a*1000

int b_int = b.toInteger()

vars.put(&quot;resp&quot;, b_int as String)

//vars.put(&quot;resp&quot;, &quot;1000&quot; )</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S16 End to End Packet Processing of Passed Packets" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">true</boolProp>
            <stringProp name="RESPONSE_CODE">200</stringProp>
            <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA">Average Response time: ${resp}</stringProp>
            <stringProp name="RESPONSE_TIME">${resp}</stringProp>
            <stringProp name="LATENCY">0</stringProp>
            <stringProp name="CONNECT">${resp}</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Status Code is Failed" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${success}&quot; == &quot;NOT_FOUND&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="S16 Failed Packets" enabled="true">
            <boolProp name="WAITING">false</boolProp>
            <boolProp name="SUCCESFULL">false</boolProp>
            <stringProp name="RESPONSE_CODE">500</stringProp>
            <stringProp name="RESPONSE_MESSAGE">Internal error</stringProp>
            <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <stringProp name="RESPONSE_TIME">0</stringProp>
            <stringProp name="LATENCY">0</stringProp>
            <stringProp name="CONNECT">0</stringProp>
            <stringProp name="URL"></stringProp>
            <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S17 Overall Status Of  The Packets" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Passed in Reg Proc " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
	FROM regprc.registration where upd_dtimes between &apos;${test_start_time}&apos; and &apos;${test_end_time}&apos; and status_code = &apos;PROCESSED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Failed in Reg Proc " enabled="true">
          <stringProp name="dataSource">regprc_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
	FROM regprc.registration where upd_dtimes between &apos;${test_start_time}&apos; and &apos;${test_end_time}&apos; and status_code = &apos;FAILED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Passed in Credential Processing" enabled="true">
          <stringProp name="dataSource">credential_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct count(*) FROM credential.credential_transaction where upd_dtimes between &apos;${test_start_time}&apos; and &apos;${test_end_time}&apos; and status_code = &apos;STORED&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Failed in Credential Processing" enabled="true">
          <stringProp name="dataSource">credential_connection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct count(*) FROM credential.credential_transaction where upd_dtimes between &apos;${test_start_time}&apos; and &apos;${test_end_time}&apos; and status_code = &apos;FAILED&apos;;
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
