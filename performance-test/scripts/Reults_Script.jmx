<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="rampUp" elementType="Argument">
            <stringProp name="Argument.name">rampUp</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testDuration" elementType="Argument">
            <stringProp name="Argument.name">testDuration</stringProp>
            <stringProp name="Argument.value">10</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testStart" elementType="Argument">
            <stringProp name="Argument.name">testStart</stringProp>
            <stringProp name="Argument.value">2025-06-06 00:00:00.000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="testEnd" elementType="Argument">
            <stringProp name="Argument.name">testEnd</stringProp>
            <stringProp name="Argument.value">2025-06-07 00:00:00.000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbHost" elementType="Argument">
            <stringProp name="Argument.name">dbHost</stringProp>
            <stringProp name="Argument.value">172.31.9.158</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPort" elementType="Argument">
            <stringProp name="Argument.name">dbPort</stringProp>
            <stringProp name="Argument.value">5432</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="regprocDbName" elementType="Argument">
            <stringProp name="Argument.name">regprocDbName</stringProp>
            <stringProp name="Argument.value">mosip_regprc</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="credentialDbName" elementType="Argument">
            <stringProp name="Argument.name">credentialDbName</stringProp>
            <stringProp name="Argument.value">mosip_credential</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbUser" elementType="Argument">
            <stringProp name="Argument.name">dbUser</stringProp>
            <stringProp name="Argument.value">postgres</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="dbPassword" elementType="Argument">
            <stringProp name="Argument.name">dbPassword</stringProp>
            <stringProp name="Argument.value">797mKZO1Bo</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="runTimeFilePath" elementType="Argument">
            <stringProp name="Argument.name">runTimeFilePath</stringProp>
            <stringProp name="Argument.value">./runtime-files</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="loopCount" elementType="Argument">
            <stringProp name="Argument.name">loopCount</stringProp>
            <stringProp name="Argument.value">500</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Regproc DB Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">regprocConnection</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${dbHost}:${dbPort}/${regprocDbName}</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">797mKZO1Bo</stringProp>
        <stringProp name="poolMax">50</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">6000</stringProp>
        <stringProp name="username">${dbUser}</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="Credential DB Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery">select 1</stringProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="dataSource">credentialConnection</stringProp>
        <stringProp name="dbUrl">jdbc:postgresql://${dbHost}:${dbPort}/${credentialDbName}</stringProp>
        <stringProp name="driver">org.postgresql.Driver</stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="password">797mKZO1Bo</stringProp>
        <stringProp name="poolMax">50</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">6000</stringProp>
        <stringProp name="username">${dbUser}</stringProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Load RID From File" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Users/akhilesh.moogi/OneDrive - Technoforte Software Private Limited/Documents/Jmeter Scripts/RegProc Async/reg_id.txt</stringProp>
        <boolProp name="ignoreFirstLine">true</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">false</boolProp>
        <stringProp name="shareMode">shareMode.thread</stringProp>
        <boolProp name="stopThread">true</boolProp>
        <stringProp name="variableNames">regId</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S01 Secure Zone To Upload Packet (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Secure Zone Notification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Upload Packet Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;UPLOAD_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.scope">all</stringProp>
            <stringProp name="Scope.variable">success</stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S01 Secure Zone To Upload Packet" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S02 Upload Packet To Validate Packet (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Upload Packet Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;UPLOAD_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Validate Packet Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;VALIDATE_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S02 Upload Packet To Validate Packet" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S03 Validate Packet To Packet Classification (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Validate Packet Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;VALIDATE_PACKET&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Packet Classification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;PACKET_CLASSIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S03 Validate Packet To Packet Classification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S04 Packet Classification To CMD Validation (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Packet Classification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1 
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;PACKET_CLASSIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CMD Validation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;CMD_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S04 Packet Classification To CMD Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S05 CMD Validation To Operator Validation (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="CMD Validation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;CMD_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Operator Validation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;OPERATOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S05 CMD Validation To Operator Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S06 Operator Validation To Supervisor Validation (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Operator Validation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;OPERATOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Supervisor Validation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;SUPERVISOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S06 Operator Validation To Supervisor Validation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S07 Supervisor Validation To Quality Classifiier (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Supervisor Validation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;SUPERVISOR_VALIDATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Quality Classifier Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;QUALITY_CLASSIFIER&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S07 Supervisor Validation To Quality Classifiier" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S08 Quality Classifiier To Demographic Verification (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Quality Classifier Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;QUALITY_CLASSIFIER&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Demographic Verification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;DEMOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S08 Quality Classifiier To Demographic Verification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S09 Demographic Verification To Biographic Verification (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Demographic Verification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;DEMOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biographic Verification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;BIOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S09 Demographic Verification To Biographic Verification" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S10 Biographic Verification To UIN Generation (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biographic Verification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;BIOGRAPHIC_VERIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UIN Generation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;UIN_GENERATOR&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S10 Biographic Verification To UIN Generation" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S11 UIN Generation To Biometric Extraction (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="UIN Generation Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;UIN_GENERATOR&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biometric Extraction Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;BIOMETRIC_EXTRACTION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S11 UIN Generation To Biometric Extraction" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S12 Biometric Extraction To Finalization (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Biometric Extraction Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;BIOMETRIC_EXTRACTION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Finalization Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;FINALIZATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S12 Biometric Extraction To Finalization" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S13 Finalization To Print Service (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Finalization Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;FINALIZATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Print Service Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;PRINT_SERVICE&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S13 Finalization To Print Service" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S14 Print Service To Internal Workflow Action (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Print Service Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;PRINT_SERVICE&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Internal Workflow Action Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;INTERNAL_WORKFLOW_ACTION&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S14 Print Service To Internal Workflow Action" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S15 Complete Reg Proc Packet Processing (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Secure Zone Notification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos; and status_code = &apos;SUCCESS&apos; order by cr_dtimes desc limit 1;

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Internal Workflow Action Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes2
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;INTERNAL_WORKFLOW_ACTION&apos; and status_code = &apos;PROCESSED&apos; order by cr_dtimes desc limit 1;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;cr_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S15 Complete Reg Proc Packet Processing" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S16 End to End Packet and Credential Processing (Results)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${loopCount}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Reg Proc Secure Zone Notification Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct id, reg_id, cr_dtimes as cr_dtimes1
	FROM regprc.registration_transaction where reg_id = &apos;${regId}&apos; and trn_type_code = &apos;SECUREZONE_NOTIFICATION&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,reg_id,cr_dtimes1</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Disabling For The Aggregate Report" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">prev.setIgnore()</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Credential Transaction Query" enabled="true">
          <stringProp name="dataSource">credentialConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT id, upd_dtimes as upd_dtimes2
	FROM credential.credential_transaction where id = &apos;${regId}-PDF&apos; and status_code = &apos;STORED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames">id,upd_dtimes2</stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="3355">id</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Compute Error And Response Time" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import java.time.LocalDateTime
import java.time.format.DateTimeFormatter
import java.time.Duration

// Fetch timestamps from JMeter variables
String createdTime=vars.get(&quot;cr_dtimes1_1&quot;);
String updatedTime=vars.get(&quot;upd_dtimes2_1&quot;);

if (createdTime == null || updatedTime == null) {
    
    vars.put(&quot;timeDifferenceMs&quot;, &quot;0&quot;);
    vars.put(&quot;status&quot;,&quot;FAIL&quot;);
} else {

    createdTime = createdTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    updatedTime = updatedTime.replaceAll(/\.(\d{3})\d*/, &apos;.$1&apos;)
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;)

    // Parse timestamps
    LocalDateTime dt1 = LocalDateTime.parse(createdTime, formatter)
    LocalDateTime dt2 = LocalDateTime.parse(updatedTime, formatter)

    // Calculate the difference in milliseconds
    long millisDiff = Duration.between(dt1, dt2).toMillis()

    // Store the result in a JMeter variable
    vars.put(&quot;timeDifferenceMs&quot;, String.valueOf(millisDiff))

    // Log output
    //log.info(&quot;Time Difference: ${millisDiff} milliseconds&quot;)
    vars.put(&quot;status&quot;,&quot;PASS&quot;);
}
prev.setIgnore();</stringProp>
          </JSR223PostProcessor>
          <hashTree/>
        </hashTree>
        <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="${status} S16 End to End Packet Processing" enabled="true">
          <boolProp name="WAITING">false</boolProp>
          <boolProp name="SUCCESFULL">true</boolProp>
          <stringProp name="RESPONSE_CODE">200</stringProp>
          <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
          <stringProp name="REQUEST_DATA"></stringProp>
          <stringProp name="RESPONSE_DATA">${status}</stringProp>
          <stringProp name="RESPONSE_TIME">${timeDifferenceMs}</stringProp>
          <stringProp name="LATENCY">0</stringProp>
          <stringProp name="CONNECT">0</stringProp>
          <stringProp name="URL"></stringProp>
          <stringProp name="RESULT_CLASS">org.apache.jmeter.samplers.SampleResult</stringProp>
        </kg.apc.jmeter.samplers.DummySampler>
        <hashTree>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Status Assertion" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">def data=vars.get(&quot;status&quot;);


if(data.equals(&quot;PASS&quot;))
{
	SampleResult.setSuccessful(true);
}
else
{
	SampleResult.setSuccessful(false);
}
</stringProp>
            <stringProp name="scriptLanguage">groovy</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="S17 Overall Status Of  The Packets (Results)" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Passed in Reg Proc Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
	FROM regprc.registration where upd_dtimes between &apos;${testStart}&apos; and &apos;${testEnd}&apos; and status_code = &apos;PROCESSED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Failed in Reg Proc Query" enabled="true">
          <stringProp name="dataSource">regprocConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) 
	FROM regprc.registration where upd_dtimes between &apos;${testStart}&apos; and &apos;${testEnd}&apos; and status_code = &apos;FAILED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Passed in Credential Processing Query" enabled="true">
          <stringProp name="dataSource">credentialConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct count(*) FROM credential.credential_transaction where upd_dtimes between &apos;${testStart}&apos; and &apos;${testEnd}&apos; and status_code = &apos;STORED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Number of Packets Failed in Credential Processing Query" enabled="true">
          <stringProp name="dataSource">credentialConnection</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT distinct count(*) FROM credential.credential_transaction where upd_dtimes between &apos;${testStart}&apos; and &apos;${testEnd}&apos; and status_code = &apos;FAILED&apos;;</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
        </JDBCSampler>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion " enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="94851343">count</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">true</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
